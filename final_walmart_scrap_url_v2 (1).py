# -*- coding: utf-8 -*-
"""final_walmart_scrap_url_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rl_K1uVGkVRTYcP4Tvu3bz4sKq5G-pNc
"""

import bs4
from bs4 import BeautifulSoup
import requests
import json
from json import JSONDecodeError
import os
import subprocess
import pandas as pd
import pprint
import time
import sys
import pickle
import csv

"""## Getting product id"""
cookies = {
    'enableHTTPS': '1',
    'userSegment': '40-percent',
    'deliveryCatchment': '3124',
    'vtc': 'cgt77dih2FdxATfS4uUDUo',
    'walmart.nearestPostalCode': 'P7B3Z7',
    'walmart.nearestLatLng': '48.4120872,-89.2413988',
    'rxVisitor': '15837802237056RTP834MTTFN5C9RM8UJMDF0G5TNOV4I',
    'walmart.id': '98aa61a9-0ef2-440c-907f-8e35a03d4040',
    'walmart.shippingPostalCode': 'P7B3Z7',
    'defaultNearestStoreId': '3124',
    'zone': '9',
    'walmart.csrf': '845346c6b117421dfadb8e3f',
    'wmt.c': '0',
    'DYN_USER_ID': '1cd8c327-e36c-4c30-ae31-450ffa145e6c',
    'WM_SEC.AUTH_TOKEN': 'MTAyOTYyMDE4JGp4bHoPPqM4IHwXXolda5CQxQid4PyYiM+D/nJqGkYOKrkubp5nLx5jSnhK/qu9oeqlDi8Y23SNoqbm43s7PvfOaZ/7RXaPhEvmbftJidzPNZe60HOO8d5KX9YgFsTqj8OFN4dileb20bpDLeCIlSFd/Hsc7bnSe4+TLU2zbj15L8sPl1ruR+2Co0+FoYvKAzEtT/9xYxFbQNViJ74oNszb+4ZNSjjfJDllwsNoIxbb/SoGFgAYL9DGZ8K45WCXb/Ew67/GsLtdlJHpe1JgEK6sU4RxgKKclgqkZSx5MDDt6MEVBaCttxNgmVmkO5DNgU2ycpstumrMJ8j6R+zbrTgp1zl+wwoVzsgI+vuWXwmdTvDsR7ns23LRp9X21gEUypNl3y1IM7t+ItR8jbJL5w==',
    'LT': '1583780225166',
    's_ecid': 'MCMID%7C52763711784505000869214469084195096524',
    'AMCVS_C4C6370453309C960A490D44%40AdobeOrg': '1',
    'wmt.breakpoint': 'd',
    'DYN_USER_ID.ro': '1cd8c327-e36c-4c30-ae31-450ffa145e6c',
    'TBV': '7',
    'dtSa': '-',
    'dtLatC': '50',
    'usrState': '1',
    'previousBreakpoint': 'desktop',
    'walmart.locale': 'en',
    'og_session_id': 'af0a84f8847311e3b233bc764e1107f2.711939.1583780282',
    'og_session_id_conf': 'af0a84f8847311e3b233bc764e1107f2.711939.1583780282',
    'cartId': '5377abc4-dbb7-4cbb-a45f-52664abbf17c',
    'NEXT_GEN.ENABLED': '1',
    'og_autoship': '0',
    's_cc': 'true',
    'BVBRANDID': '819bff00-6fc8-4f17-9063-6e35e8edf3d8',
    'BVImplmain_site': '2036',
    'cookiePolicy': 'true',
    's_visit': '1',
    'headerType': 'whiteGM',
    'localStoreInfo': 'eyJwb3N0YWxDb2RlIjoiUDdCM1o3IiwibG9jYWxTdG9yZUlkIjoiMzEyNCIsInNlbGVjdGVkU3RvcmVJZCI6IjMxMjQiLCJzZWxlY3RlZFN0b3JlTmFtZSI6IlRodW5kZXIgQmF5IFN1cGVyY2VudHJlIiwiZnVsZmlsbG1lbnRTdG9yZUlkIjoiMzEyNCIsImZ1bGZpbGxtZW50VHlwZSI6IklOU1RPUkVfUElDS1VQIn0K',
    's_sq': '%5B%5BB%5D%5D',
    'bstc': 'Z6j5qTjOWS1tUBGFnJyyfI',
    'xpa': '2lwWQ|6FUTl|JFA3E|LVSOt|MZ9tt|NOECn|NOaJP|O7oLY|OnAAN|SXgTw|WsUbN|ZINk3|_AAED|jeBOs|mOlOu|qgEW6|sGGbM|xzlm3|yI7_k',
    'exp-ck': '2lwWQi6FUTl1JFA3E3LVSOt1MZ9tt1NOECn2NOaJPxO7oLY1OnAAN1SXgTw6WsUbN1ZINk34_AAED6jeBOs5mOlOuCqgEW61sGGbM4xzlm31yI7_k1',
    'TS011fb5f6': '0130aff232a74f3092f0512a029d6a5a91c9a8220a9667fd296ef66ea1ac8020bee7d0b55f71f9ec213326c98e8685ecaf2daddc97',
    'TS0175e29f': '0130aff232a74f3092f0512a029d6a5a91c9a8220a9667fd296ef66ea1ac8020bee7d0b55f71f9ec213326c98e8685ecaf2daddc97',
    '_ga': 'GA1.2.2103727771.1583927388',
    '_gid': 'GA1.2.616863720.1583927389',
    'xpm': '1%2B1583926997%2Bcgt77dih2FdxATfS4uUDUo~%2B0',
    'akaau_P1': '1583929189~id=3743fe117eba5e189e2f81ea8d765cf4',
    'AMCV_C4C6370453309C960A490D44%40AdobeOrg': '-432600572%7CMCIDTS%7C18333%7CMCMID%7C52763711784505000869214469084195096524%7CMCAID%7CNONE%7CMCOPTOUT-1583934588s%7CNONE%7CvVersion%7C4.5.2%7CMCAAMLH-1584532188%7C4%7CMCAAMB-1584532188%7Cj8Odv6LonN4r3an7LhD3WZrU1bUpAkFkkiY1ncBR96t2PTI%7CMCSYNCSOP%7C411-18340',
    '_gcl_au': '1.1.1253472050.1583927392',
    '_fbp': 'fb.1.1583927392090.1342832719',
    'BVBRANDSID': '38af1296-f393-4fb1-830a-b708f1d7f10d',
    'rxvt': '1583929201781|1583927386468',
    'dtPC': '39$527385326_169h1p39$527386849_816h1p39$527390902_418h1p39$527401744_838h1vGPAKMHBORGNEPCNWOUDOFONEOPAPVETL',
    'authDuration': '{"lat":"1583927405573000","lt":"1583927405573000"}',
    'dtCookie': '9$7B89556EA0A2938FEE1966C08A1BE7B9',
    'ENV': 'ak-dfw-prod',
    'seqnum': '19',
    'TS01f4281b': '0130aff2324b75e0a5578489038b0889933ed5ae482e7353d43029fd76243aaacaeaedd669342325a1e5aee489db1ec44543948043',
    's_gnr': '1583929038321-Repeat',
    '_4c_': 'jVRdT%2BQgFP0rmz74JFNogYKJMeq62d34rck%2BNkzBKbFTGqBTXTP%2FfS%2FjOOommywPlHs494MDty%2FZ1Jo%2BOyBMlLKQuJTw2c8ezXPIDl6yZkjzKk2j77KDrI1xCAd5Pk3TbFLdUvk4a1Ru%2BnxQffTPqHVjMK3rdECDiSHf2SiMw9BZE%2FJHGxtIiprOqN72i8%2BA8SG%2FRCXBPNvPGqcNZCVyJmYM7PgbLEQEhvXgnR6bWMfnIXEmM%2F8S9CNsaLOyjaknq2ObnEuO39HW2EUbAa64SOjgYY1n%2FHUIzkoqBEm5J9trN%2B3CFJjid3QXhmBKAZ57NwWTYp223i3Nl02JDkTMzm0%2FPoHhzYPxfsP5t4pujNo5jzq7SsoMKlqHHkbf2zh6A8IUTJIj21h92EKaQS1M%2Ff26vjMquF519amKZuH8c31vO1NfJ%2Ff625t7%2FesC6gg2bvTa5d1icOcAJ2FXSR5YdK5RXeLCC9nPri7ub%2BuTs%2BPTq8sPR3DL19gohO7jWeZ5CPm0tI3qlVbprnKS%2F7xDxYyIGUbnx7dlHrgseYFxVVSYMnF0fHNySPaWcDZWVLysCKkEZZhhjAWXBaGUSywokQxLzgq6d3xzdkjeSrs4%2FfEVCvs%2FV3C693axMP7CxNZpcLz3SlvQC2RMDwOaAt7Mgxq7mMx0102nQrCNNuExuiFb72dPm86hmJSVZGUh4IVGaBPBKU4DGN7qbQtlc14INTcM8bKQiFaqQeCkUFVQMscPVEkls21MSRgDOpGSrl%2BLeY3xXtE7jdMSjgU0%2B8ZSf%2B0zwkWqZdoSdhsVlP6ZmhCgrnaxsJbVvCw54pppRE3DkRC8RETzOSWGsYbrt3SbfwhJStCtEtCqGyHW6z8%3D',
}

headers = {
    'authority': 'www.walmart.com',
    'pragma': 'no-cache',
    'cache-control': 'no-cache',
    'upgrade-insecure-requests': '1',
    'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36',
    'sec-fetch-dest': 'document',
    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'sec-fetch-site': 'none',
    'sec-fetch-mode': 'navigate',
    'sec-fetch-user': '?1',
    'accept-language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
}

URL_MAIN =  'https://www.walmart.com'
products_list = []
dataset = []

import psycopg2

con=psycopg2.connect(
    database='dev_meta',
    user='sa',
    password='12345678',
    host='postgresql-32416-0.cloudclusters.net',
    port=32416,

)
cur = con.cursor()

cur.execute("select * from  public.walmart_main_menu_url where isused = false")
all_menu_links = cur.fetchall()
for row in all_menu_links:
    foriegn_key_for_walmart_product_info = row[0]
    menu_link = row[1]
    print(foriegn_key_for_walmart_product_info, menu_link)
    # rerion start intert
    for i in range(1, 25):
        # ?page=3
        time.sleep(5)
        print(i)
        try:
            BRANCHES = []
            BRANCHES = [menu_link + '?page=' + str(i)]
            print(BRANCHES)
            for branch in BRANCHES:
                branch_name = branch.split('/')[-1].split('-')
                # print(branch)
                response = requests.get(branch, headers=headers, cookies=cookies)  # , timeout=2
                soup = BeautifulSoup(response.content, 'html.parser')
                scripts = soup.findAll('script')
                for script in scripts:
                    try:
                        # print("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
                        # print(script)
                        text = script.get_text()
                        content = json.loads(text)
                        # print(content['searchContent']['preso']['items'])
                        for item_row in content['searchContent']['preso']['items']:
                            # print(item_row)
                            productPageUrl = 'https://www.walmart.com' + item_row['productPageUrl']
                            productId = item_row['productId']
                            productType = item_row['productType']
                            productType = productType.replace("'", " ")
                            productType = productType.replace('"', " ")
                            title = item_row['title']
                            title = title.replace("'", " ")
                            title = title.replace('"', " ")
                            # print(title)
                            description = item_row['description']
                            description = description.replace("'", " ")
                            description = description.replace('"', " ")
                            imageUrl = item_row['imageUrl']
                            productCategory = item_row['productCategory']
                            productCategory = productCategory.replace("'", " ")
                            productCategory = productCategory.replace('"', " ")
                            # inser_query=inser_query = 'INSERT INTO public.walmart_product_info(walmart_main_menu_url_id, "productPageUrl", "productId", "productType", title, description, "imageUrl", "productCategory", producttitle, brandname, currency, price, itemnumber, isactive) VALUES (33,'+ "'"+ productPageUrl +"',"+ "'+http+',"+"'+http+',"+ "'+http+',"+ "'+http+',"+"'+http+',"+"'+http+',"+ "'+http+',"+ "'+http+',"+ "'+http+',"+"'+http+',"+ "'+http+',"+"'0')"
                            inser_query = 'INSERT INTO public.walmart_product_info(walmart_main_menu_url_id, "productPageUrl", "productId", "productType", title, description, "imageUrl", "productCategory", producttitle, brandname, currency, price, itemnumber, isactive,isused) VALUES ('+ "'" + str(foriegn_key_for_walmart_product_info) + "'," + "'" + productPageUrl + "'," + "'" + productId + "'," + "'" + productType + "'," + "'" + title + "'," + "'" + description + "'," + "'" + imageUrl + "'," + "'" + productCategory + "'," + "'+http+'," + "'+http+'," + "'+http+'," + "'+http+'," + "'+http+'," + "'0','0')"
                            products_list.append(['https://www.walmart.com' + item_row['productPageUrl']])
                            # print(inser_query)
                            cur.execute(inser_query)
                            con.commit()
                    # print(content['searchContent']['preso']['items'][0])
                    # print("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
                    except Exception as e: # work on python 3.x
                        print('Failed to upload to ftp: '+ str(e))
                        # print(Exception , "3 excepton")
                        continue
        # endregion
        except Exception:
            print("4 excepton")
            continue
    ## update link
    update_row = 'update  public.walmart_main_menu_url set isused = true  where id =' + "'" + str(foriegn_key_for_walmart_product_info) + "'"
    cur.execute(update_row)
    con.commit()

# productId
# usItemId
# productType
# title
# description
# imageUrl
# productPageUrl
# department
# productCategory
# sellerId
# sellerName
# enableAddToCart
# canAddToCart
# showPriceAsAvailable
# seeAllName
# seeAllLink
# itemClassId
# primaryOffer
# fulfillment
# inventory
# quantity
# brand
# geoItemClassification
# giftingEligible
# wmtgPricePerUnitQuantity
# standardUpc
# isHeartable
# isWMPlusShipping
# blitzItem
# marketPlaceItem
# twoDayShippingEligible
# shippingPassEligible
# wfsEnabled
# pickupDiscountEligible
# preOrderAvailable
# virtualPack
# premiumBrand
# is_limited_qty
# imageProps
# isBluRay
# isDvd
# isVuduDigital
# visibleSwatches

import time
URL_MAIN =  'https://www.walmart.com'
products_list = []
dataset = []
index=0
con=psycopg2.connect(
    database='dev_meta',
    user='sa',
    password='12345678',
    host='postgresql-32416-0.cloudclusters.net',
    port=32416,

)
cur = con.cursor()

cur.execute("select * from  public.walmart_product_info where isused = false")
all_product_rows = cur.fetchall()
for row in all_product_rows:
    time.sleep(15)
    product_link=row[2]
    print(product_link)
    index=index+1
    print(index)
    branch=product_link
    branch_name = branch.split('/')[-1].split('-')
    try:
      response = requests.get(branch, headers=headers, cookies=cookies)
    except Exception:
      continue
    soup1 = BeautifulSoup(response.content, 'lxml')
    content = soup1.find("body")
    content2 = content.find("div", class_="hf-Bot")
    detail = ""
    producttitle= ""
    brandname= ""
    currency= ""
    price= ""
    itemnumber= ""
    try:
        # detail = detail + content2.find("h1",class_="prod-ProductTitle").text
        producttitle=content2.find("h1",class_="prod-ProductTitle").text
        producttitle = producttitle.replace("'", " ")
        producttitle = producttitle.replace('"', " ")
    except:
        producttitle=""
        pass
    try:
        brandname =  content2.find("a",class_="prod-brandName").text
        brandname = brandname.replace("'", " ")
        brandname = brandname.replace('"', " ")
    except:
        brandname=""
        pass
    try:
        currency = content2.find("span", class_="price-currency").attrs['content']
    except:
        currency = ""
        pass
    try:
        price =  content2.find("span", class_="price-characteristic").attrs['content']
    except:
        price=""
        pass

    try:
        itemnumber = content2.find("div", class_="wm-item-number").text
    except:
        itemnumber=""
        pass

    set_value = 'producttitle=' + "'" + producttitle  + "'," + 'brandname=' + "'" + brandname  + "'," + 'currency=' + "'" + currency  + "'," + 'price=' + "'" + price  + "'," + 'itemnumber=' + "'" + itemnumber  + "'"
    update_row= 'update public.walmart_product_info set isused = true ,'      +    set_value   +' where id =' + "'" + str(row[0]) + "'"
    print(update_row)
    cur.execute(update_row)
    con.commit()

